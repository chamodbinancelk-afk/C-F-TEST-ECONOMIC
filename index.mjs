import { load } from 'cheerio';
import moment from 'moment-timezone';

const HARDCODED_CONFIG = {
    // ‚ö†Ô∏è ‡∂î‡∂∂‡∑ö Telegram Token ‡∑É‡∑Ñ Chat ID ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    TELEGRAM_TOKEN: '5389567211:AAG0ksuNyQ1AN0JpcZjBhQQya9-jftany2A',
    CHAT_ID: '-1003111341307',
};

const CHANNEL_USERNAME = 'C_F_News';
const CHANNEL_LINK_TEXT = 'C F NEWS ‚Çø';
const CHANNEL_LINK_URL = `https://t.me/${CHANNEL_USERNAME}`;

const COLOMBO_TIMEZONE = 'Asia/Colombo';
const HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Referer': 'https://www.forexfactory.com/',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
};

const FF_CALENDAR_URL = "https://www.forexfactory.com/calendar";

const LAST_ECONOMIC_EVENT_ID_KEY = 'last_economic_event_id';
const LAST_ECONOMIC_MESSAGE_KEY = 'last_economic_message';
const LAST_PRE_ALERT_EVENT_ID_KEY = 'last_pre_alert_event_id';
const PRE_ALERT_TTL_SECONDS = 259200; // 3 Days TTL for Pre-Alert

// --- UTILITY FUNCTIONS (unchanged) ---

async function sendRawTelegramMessage(chatId, message, imgUrl = null, replyMarkup = null, replyToId = null, env) {
    const TELEGRAM_TOKEN = HARDCODED_CONFIG.TELEGRAM_TOKEN;
    
    if (!TELEGRAM_TOKEN || TELEGRAM_TOKEN === 'YOUR_TELEGRAM_BOT_TOKEN_HERE') {
        console.error("TELEGRAM_TOKEN is missing or placeholder.");
        return false;
    }
    const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
    
    let currentImgUrl = imgUrl;
    let apiMethod = currentImgUrl ? 'sendPhoto' : 'sendMessage';
    let maxAttempts = 3;

    for (let attempt = 0; attempt < maxAttempts; attempt++) {
        let payload = { chat_id: chatId, parse_mode: 'HTML' }; 

        if (apiMethod === 'sendPhoto' && currentImgUrl) {
            payload.photo = currentImgUrl;
            payload.caption = message;
        } else {
            payload.text = message;
            apiMethod = 'sendMessage';
        }
        
        if (replyMarkup && apiMethod === 'sendMessage') {
            payload.reply_markup = replyMarkup;
        }

        if (replyToId) {
            payload.reply_to_message_id = replyToId;
            payload.allow_sending_without_reply = true;
        }

        const apiURL = `${TELEGRAM_API_URL}/${apiMethod}`;
        
        try {
            const response = await fetch(apiURL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.status === 429) {
                const delay = Math.pow(2, attempt) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
                continue;
            }

            if (!response.ok) {
                const errorText = await response.text();
                if (apiMethod === 'sendPhoto') {
                    currentImgUrl = null;
                    apiMethod = 'sendMessage';
                    attempt = -1;
                    console.error(`SendPhoto failed, retrying as sendMessage: ${errorText}`);
                    continue;
                }
                console.error(`Telegram API Error (${apiMethod}): ${response.status} - ${errorText}`);
                break;
            }
            return true; // Success
        } catch (error) {
            console.error("Error sending message to Telegram:", error);
            const delay = Math.pow(2, attempt) * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    return false;
}

async function readKV(env, key) {
    try {
        if (!env.NEWS_STATE) {
            console.error("KV Binding 'NEWS_STATE' is missing in ENV.");
            return null;
        }
        const value = await env.NEWS_STATE.get(key);
        if (value === null || value === undefined) {
            return null;
        }
        return value;
    } catch (e) {
        console.error(`KV Read Error (${key}):`, e);
        return null;
    }
}

async function writeKV(env, key, value, expirationTtl) {
    try {
        if (!env.NEWS_STATE) {
            console.error("KV Binding 'NEWS_STATE' is missing in ENV. Write failed.");
            return;
        }
        
        let options = {};
        
        if (key.startsWith(LAST_ECONOMIC_EVENT_ID_KEY)) {
            options.expirationTtl = 2592000;
        } 
        else if (key.startsWith(LAST_PRE_ALERT_EVENT_ID_KEY)) { 
             options.expirationTtl = PRE_ALERT_TTL_SECONDS; 
        }
        
        if (expirationTtl !== undefined) {
            options.expirationTtl = expirationTtl;
        }

        await env.NEWS_STATE.put(key, String(value), options);
    } catch (e) {
        console.error(`KV Write Error (${key}):`, e);
    }
}

function analyzeComparison(actual, previous) {
    try {
        const cleanAndParse = (value) => parseFloat(value.replace(/%|,|K|M|B/g, '').trim() || '0');
        const a = cleanAndParse(actual);
        const p = cleanAndParse(previous);

        if (isNaN(a) || isNaN(p) || actual.trim() === '-' || actual.trim() === '' || actual.toLowerCase().includes('holiday')) {
            return { comparison: `Actual: ${actual}`, reaction: "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö" };
        }

        if (a > p) {
            return { comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`, reaction: "üìà Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂â‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í (‡∂∞‡∂±‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∑ä)" };
        } else if (a < p) {
            return { comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`, reaction: "üìâ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í (‡∂ç‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∑ä)" };
        } else {
            return { comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í (${actual})`, reaction: "‚öñ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂¥‡∑Ä‡∂≠‡∑ì" };
        }
    } catch (error) {
        console.error("Error analyzing economic comparison:", error);
        return { comparison: `Actual: ${actual}`, reaction: "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö" };
    }
}


/**
 * üõ†Ô∏è [MODIFIED] Impact Parsing Logic ‡∂ë‡∂ö ‡∑Å‡∂ö‡∑ä‡∂≠‡∑í‡∂∏‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠.
 * üõ†Ô∏è Date Filtering Logic ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂©‡∑í ‡∂ö‡∂ª ‡∂á‡∂≠ (Today and Tomorrow ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä Fetch ‡∂ö‡∂ª‡∂∫‡∑í).
 */
async function getCalendarEvents() {
    const resp = await fetch(FF_CALENDAR_URL, { headers: HEADERS });
    if (!resp.ok) throw new Error(`[SCRAPING ERROR] HTTP error! status: ${resp.status} on calendar page.`);

    const html = await resp.text();
    const $ = load(html);
    const rows = $('.calendar__row');

    const events = [];
    // ‡∑Ä‡∂ª‡∑ä‡∂≠‡∂∏‡∑è‡∂± ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂ö‡∑ú‡∑Ö‡∂π Timezone ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä
    const now = moment().tz(COLOMBO_TIMEZONE);
    const todayStart = now.clone().startOf('day');
    // ‡∑Ñ‡∑ô‡∂ß ‡∂Ø‡∑Ä‡∑É‡∑ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑‡∂∫
    const tomorrowStart = now.clone().add(1, 'days').startOf('day'); 
    
    let currentDateStr = now.format('YYYYMMDD'); 
    
    rows.each((i, el) => {
        const row = $(el);
        const eventId = row.attr("data-event-id");
        
        if (!eventId) return;

        // 1. Date (If it's a new day row)
        const dateElement = row.find('td.calendar__day span.date');
        if (dateElement.length > 0) {
            // FF date format: "Mon Oct 13"
            const ffDateStr = dateElement.text().trim() + ' ' + now.year();
            const parsedDate = moment.tz(ffDateStr, 'ddd MMM D YYYY', COLOMBO_TIMEZONE);
            if (parsedDate.isValid()) {
                 currentDateStr = parsedDate.format('YYYYMMDD');
            }
        }
        
        const currency_td = row.find(".calendar__currency");
        const title_td = row.find(".calendar__event");
        const time_td = row.find('.calendar__time');
        const actual_td = row.find(".calendar__actual");
        const previous_td = row.find(".calendar__previous");
        const forecast_td = row.find(".calendar__forecast");
        const impact_td = row.find('.calendar__impact');
        
        const timeStr = time_td.text().trim();
        const actualStr = actual_td.text().trim();
        const previousStr = previous_td.text().trim() || "0";
        const forecastStr = forecast_td.text().trim() || "N/A";

        // 2. üõ†Ô∏è IMPACT PARSING (Impact ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂ö‡∑í‡∂∫‡∑Ä‡∑ì‡∂∏‡∂ß)
        let impactText = "Unknown Impact";
        let impactClass = "unknown";
        const impactElement = impact_td.find('span.impact-icon, div.impact-icon').first();
        
        if (impactElement.length > 0) {
            // Option A: Read the 'title' attribute (Most reliable)
            impactText = impactElement.attr('title') || "Unknown Impact";
            
            // Option B: Read the class list for classification (This fixes the 'Unknown Impact' bug for High/Medium)
            const classList = impactElement.attr('class') || "";
            if (classList.includes('impact-icon--high')) {
                impactText = "High Impact Expected";
                impactClass = "high";
            } else if (classList.includes('impact-icon--medium')) {
                impactText = "Medium Impact Expected";
                impactClass = "medium";
            } else if (classList.includes('impact-icon--low')) {
                impactText = "Low Impact Expected";
                impactClass = "low";
            } else if (classList.includes('impact-icon--holiday')) {
                impactText = "Non-Economic/Holiday";
                impactClass = "holiday";
            }
            // Fallback check
            if (impactText.toLowerCase().includes('high')) impactClass = 'high';
            else if (impactText.toLowerCase().includes('medium')) impactClass = 'medium';
            else if (impactText.toLowerCase().includes('low')) impactClass = 'low';
        }
        
        // 3. Calculating the Event Time in Colombo Timezone
        let eventTime = null;
        let isTodayOrTomorrow = false;
        
        const timestampMs = row.attr('data-timestamp');
        if (timestampMs) {
            // MOST RELIABLE: Use FF's provided timestamp (UNIX ms)
            eventTime = moment.unix(timestampMs / 1000).tz(COLOMBO_TIMEZONE);
        } else if (timeStr && timeStr !== "All Day" && timeStr !== "Tentative") {
            // Fallback (Less Reliable)
            try {
                 const dateTimeStr = currentDateStr + ' ' + timeStr;
                 eventTime = moment.tz(dateTimeStr, 'YYYYMMDD h:mma', COLOMBO_TIMEZONE);
            } catch(e) {
                console.error("Time parsing fallback failed:", e);
            }
        }
        
        // 4. üÜï STRICT DATE CHECK (Fetch only Today and Tomorrow events)
        if (eventTime) {
             // Event Time ‡∂ë‡∂ö ‡∂Ö‡∂Ø ‡∂Ø‡∑Ä‡∑É‡∂ß ‡∑Ñ‡∑ù ‡∑Ñ‡∑ô‡∂ß ‡∂Ø‡∑Ä‡∑É‡∂ß (‡∂Ö‡∂Ø + 1) ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ö‡∂∫‡∂≠‡∑ä ‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.
             isTodayOrTomorrow = eventTime.isSameOrAfter(todayStart, 'day') && eventTime.isBefore(tomorrowStart.clone().add(1, 'day'), 'day');
        }

        if (eventTime && isTodayOrTomorrow) {
            events.push({
                id: eventId,
                currency: currency_td.text().trim(),
                title: title_td.text().trim(),
                actual: actualStr,
                previous: previousStr,
                forecast: forecastStr,
                impact: impactText,
                impactClass: impactClass, 
                timeStr: timeStr, 
                eventTime: eventTime 
            });
        }
    });
    
    return events;
}


/**
 * üõ†Ô∏è [MODIFIED] Critical 60-Minute Filter ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠ (Milli-seconds ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂Ø‡∑í‡∂± ‡∂ú‡∂´‡∂±‡∂ö‡∂ß ‡∂¥‡∑ô‡∂ª alerts ‡∑Ä‡∑ì‡∂∏ ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂∫‡∑í).
 */
async function fetchUpcomingNewsForAlerts(env) {
    const CHAT_ID = HARDCODED_CONFIG.CHAT_ID;
    
    try {
        const events = await getCalendarEvents();
        
        if (events.length === 0) {
            console.info("[Pre-Alert Check] No upcoming events found for today/tomorrow.");
            return;
        }
        
        const now = moment().tz(COLOMBO_TIMEZONE);
        let sentCount = 0;

        for (const event of events) {
            // CRITICAL CHECK 1: Actual ‡∂Ö‡∂ú‡∂∫ ‡∂≠‡∑í‡∂∂‡∑ö ‡∂±‡∂∏‡∑ä, ‡∂ë‡∂∫ "Upcoming" ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö.
            if (event.actual && event.actual.trim() !== '-' && event.actual.trim() !== '') {
                continue; 
            }
            // CRITICAL CHECK 2: "Holiday" ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è Alert ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∑ê‡∂≠.
            if (event.impactClass === 'holiday') {
                continue; 
            }
            // CRITICAL CHECK 3: ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä Alert ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∑ê‡∂≠.
             if (event.eventTime.isSameOrBefore(now)) {
                 continue;
             }
            
            // üÜï CRITICAL CHECK 4: Alert ‡∂ë‡∂ö ‡∂∫‡∑ê‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑ä‡∂≠‡∑ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂¥‡∂∏‡∂´‡∂∫‡∑í! (NEW FIX)
            // eventTime ‡∑É‡∑Ñ now ‡∂Ö‡∂≠‡∂ª ‡∑Ä‡∑ô‡∂±‡∑É ‡∂∏‡∑í‡∂Ω‡∑í‡∑É‡∑ô‡∂ö‡∂±‡∑ä‡∂©‡∑ä‡∑É‡∑ä ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂ú‡∑ô‡∂± ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∂ª‡∑Ä‡∂∫‡∑í.
            const timeDifferenceInMs = event.eventTime.valueOf() - now.valueOf();
            const timeDifferenceInMinutes = Math.floor(timeDifferenceInMs / (1000 * 60)); // ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∂ª‡∑Ä‡∂∫‡∑í.
            
            if (timeDifferenceInMinutes > 60 || timeDifferenceInMinutes <= 0) {
                 // Event ‡∂ë‡∂ö ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 60‡∂ö‡∂ß ‡∑Ä‡∂©‡∑è ‡∂Ø‡∑î‡∂ª ‡∂±‡∂∏‡∑ä (‡∂Ø‡∑í‡∂± ‡∂ú‡∂´‡∂±‡∂ö‡∂ß ‡∂¥‡∑ô‡∂ª) ‡∑Ñ‡∑ù ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, Alert ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.
                 continue;
            }
            // Alert ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∂∂‡∂±‡∑ä‡∂±‡∑ö Event ‡∂ë‡∂ö ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 60‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠ ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∑í.
            
            const preAlertKVKey = LAST_PRE_ALERT_EVENT_ID_KEY + "_" + event.id;
            const lastAlertId = await readKV(env, preAlertKVKey);
            
            // Alert ‡∂ë‡∂ö ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.
            if (event.id === lastAlertId) continue;
            
            // --- Pre-Alert Message ---
            const eventDay = event.eventTime.format('YYYY-MM-DD');
            const releaseTime = event.eventTime.format('hh:mm A');
            
            // Impact ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è Emoji
            let impactEmoji = "üí•";
            if (event.impactClass === 'high') impactEmoji = "üö®üö®üö®";
            else if (event.impactClass === 'medium') impactEmoji = "üü†üü†";
            else if (event.impactClass === 'low') impactEmoji = "üü°";

            const alertMessage =
                `‚ö†Ô∏è <b>PRE-ALERT: Upcoming Economic News!</b> ‚ö†Ô∏è ${impactEmoji}\n\n` +
                `üö® <b>Alert:</b> ‡∂∏‡∑ô‡∂∏ ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∂ß **‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í ${timeDifferenceInMinutes}** ‡∂ö ‡∂ö‡∑è‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂â‡∂≠‡∑í‡∂ª‡∑í‡∑Ä ‡∂á‡∂≠!\n\n` + 
                `üìÖ <b>Date:</b> ${eventDay} (SL Time)\n` +
                `‚è∞ <b>Release Time:</b> ${releaseTime} (SL Time)\n\n` +
                `üåç <b>Currency:</b> ${event.currency}\n` +
                `üìå <b>Headline:</b> ${event.title}\n` +
                `üí• <b>Impact:</b> <b>${event.impact}</b>\n\n` +
                `üìâ <b>Forecast:</b> ${event.forecast}\n` +
                `üìâ <b>Previous:</b> ${event.previous}\n\n` +
                `<i>‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö Volatility ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±.</i>`;
                
            const replyMarkup = {
                inline_keyboard: [
                    [{ 
                        text: `üî• ${CHANNEL_LINK_TEXT} < / >`, 
                        url: CHANNEL_LINK_URL 
                    }]
                ]
            };

            const sendSuccess = await sendRawTelegramMessage(CHAT_ID, alertMessage, null, replyMarkup, null, env);

            if (sendSuccess) {
                await writeKV(env, preAlertKVKey, event.id, PRE_ALERT_TTL_SECONDS); 
                sentCount++;
            }
        }
        
        if (sentCount > 0) {
            console.log(`[Pre-Alert Success] Found and sent ${sentCount} new pre-alerts.`);
        } else {
            console.log(`[Pre-Alert Success] No new alerts found in the 60-minute window or all had Actual values.`);
        }

    } catch (error) {
        console.error("[PRE-ALERT ERROR] A CRITICAL error occurred during PRE-ALERT task:", error.stack);
    }
}


/**
 * üõ†Ô∏è [UNCHANGED] Actual News Release (Actual ‡∂Ö‡∂ú‡∂∫ ‡∂Ü ‡∂¥‡∑É‡∑î Alert ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏).
 */
async function fetchEconomicNews(env) {
    const CHAT_ID = HARDCODED_CONFIG.CHAT_ID;
    try {
        const events = await getCalendarEvents(); 
        
        if (events.length === 0) return;

        let sentCount = 0;
        let lastSentMessage = "";

        for (const event of events.reverse()) {
            if (!event.actual || event.actual === "-") continue; 

            const eventKVKey = LAST_ECONOMIC_EVENT_ID_KEY + "_" + event.id;
            const lastEventId = await readKV(env, eventKVKey);
            
            if (event.id === lastEventId) continue;
            
            await writeKV(env, eventKVKey, event.id);

            const { comparison, reaction } = analyzeComparison(event.actual, event.previous);
            const date_time = moment().tz(COLOMBO_TIMEZONE).format('YYYY-MM-DD hh:mm A');
            
            let impactEmoji = "üí•";
            if (event.impactClass === 'high') impactEmoji = "üö®üö®üö®";
            else if (event.impactClass === 'medium') impactEmoji = "üü†üü†";
            else if (event.impactClass === 'low') impactEmoji = "üü°";

            const mainMessage =
                `üü¢ <b>ACTUAL NEWS RELEASED!</b> üü¢ ${impactEmoji}\n\n` +
                `‚è∞ <b>Date & Time:</b> ${date_time}\n` +
                `üïì <b>Release Time:</b> ${event.eventTime ? event.eventTime.format('hh:mm A') : event.timeStr} (SL Time)\n\n` +
                `üåç <b>Currency:</b> ${event.currency}\n` +
                `üìå <b>Headline:</b> ${event.title}\n` +
                `üí• <b>Impact:</b> <b>${event.impact}</b>\n\n` +
                `üìà <b>Actual:</b> ${event.actual}\n` +
                `üìâ <b>Previous:</b> ${event.previous}\n\n` +
                `üîç <b>Details:</b> ${comparison}\n\n` +
                `<b>üìà Market Reaction Forecast:</b> ${reaction}\n\n` +
                `üöÄ <b>Dev: Mr Chamo üá±üá∞</b>`;

            const replyMarkup = {
                inline_keyboard: [
                    [{ 
                        text: `üî• ${CHANNEL_LINK_TEXT} < / >`, 
                        url: CHANNEL_LINK_URL 
                    }]
                ]
            };
            
            const sendSuccess = await sendRawTelegramMessage(CHAT_ID, mainMessage, null, replyMarkup, null, env);

            if (sendSuccess) {
                lastSentMessage = mainMessage;
                sentCount++;
            }
        }
        
        if (sentCount > 0) {
            await writeKV(env, LAST_ECONOMIC_MESSAGE_KEY, lastSentMessage);
            console.log(`[Actual Release Success] Found and sent ${sentCount} new events. Saved latest to KV.`);
        } else {
            console.log(`[Actual Release Success] No new events found to send.`);
        }

    } catch (error) {
        console.error("[ACTUAL RELEASE ERROR] A CRITICAL error occurred during ACTUAL RELEASE task:", error.stack);
    }
}


// --- WORKER HANDLERS (UNCHANGED) ---

async function handleTelegramUpdate(update, env) {
    if (update.callback_query) {
        const callbackQueryId = update.callback_query.id;
        const TELEGRAM_TOKEN = HARDCODED_CONFIG.TELEGRAM_TOKEN;
        const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
        
        await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ callback_query_id: callbackQueryId, text: '‡∂∏‡∑ô‡∂∏ ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª ‡∂á‡∂≠.', show_alert: false })
        });
        return;
    }

    if (!update.message || !update.message.text) {
        return;
    }
    
    await handleCommands(update, env);
}

async function handleCommands(update, env) {
    const CHAT_ID = HARDCODED_CONFIG.CHAT_ID;

    const text = update.message.text.trim();
    const command = text.split(' ')[0].toLowerCase();
    const userId = update.message.from.id;
    const chatId = update.message.chat.id;
    const messageId = update.message.message_id;
    const username = update.message.from.username || update.message.from.first_name;

    if (command === '/economic') {
        const isMember = await checkChannelMembership(userId, env);

        if (!isMember) {
            const denialMessage =
                `‚õî <b>Access Denied</b> ‚õî\n\n` +
                `Hey There <a href="tg://user?id=${userId}">${username}</a>,\n` +
                `You Must Join <b>${CHANNEL_LINK_TEXT}</b> Channel To Use This BOT.\n` +
                `So, Please Join it & Try Again.üëÄ Thank You ‚úçÔ∏è`;

            const replyMarkup = {
                inline_keyboard: [
                    [{
                        text: `üî• ${CHANNEL_LINK_TEXT} < / >`,
                        url: CHANNEL_LINK_URL
                    }]
                ]
            };

            await sendRawTelegramMessage(chatId, denialMessage, null, replyMarkup, messageId, env);
            return;
        }
    }

    switch (command) {
        case '/start':
            const replyText =
                `<b>üëã Hello There !</b>\n\n` +
                `üíÅ‚Äç‚ôÇÔ∏è ‡∂∏‡∑ö BOT ‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä ‡∂î‡∂∫‡∑è‡∂ß <b>Economic News</b> ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∂Ø‡∑ê‡∂± ‡∂ú‡∂±‡∑ä‡∂±. News Update ‡∑Ä‡∑ô‡∂Ø‡∑ä‡∂Ø‡∑ì‡∂∏ <b>C F NEWS MAIN CHANNEL</b> ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è.\n\n` +
                `üôã‚Äç‚ôÇÔ∏è Commands ‡∑Ä‡∂Ω Usage ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂∏‡∂∫‡∑íüëá\n\n` +
                `‚óá <code>/economic</code> :- üìÅ Last Economic News (Economic Calendar Event)\n\n` +
                `üéØ ‡∂∏‡∑ö BOT ‡∂¥‡∑ê‡∂∫ 24‡∂∏ Active ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è.üîî.. ‚úçÔ∏è\n\n` +
                `‚óá‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óá\n\n` +
                `üöÄ <b>Developer :</b> @chamoddeshan\n` +
                `üî• <b>Mr Chamo Corporation ¬©</b>\n\n` +
                `‚óá‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óá`;
            await sendRawTelegramMessage(chatId, replyText, null, null, messageId, env);
            break;

        case '/economic':
            const messageKey = LAST_ECONOMIC_MESSAGE_KEY;
            const lastFullMessage = await readKV(env, messageKey);
            
            if (lastFullMessage) {
                await sendRawTelegramMessage(chatId, lastFullMessage, null, null, messageId, env);
            } else {
                const fallbackText = "Sorry, no recent economic event has been processed yet. Please wait for the next update.";
                await sendRawTelegramMessage(chatId, fallbackText, null, null, messageId, env);
            }
            break;

        default:
            const defaultReplyText = `‡∂î‡∂∂‡∂ß ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠. ‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∑Ñ Commands ‡∑É‡∂≥‡∑Ñ‡∑è <b>/start</b> ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.`;
            await sendRawTelegramMessage(chatId, defaultReplyText, null, null, messageId, env);
            break;
    }
}

async function checkChannelMembership(userId, env) {
    const TELEGRAM_TOKEN = HARDCODED_CONFIG.TELEGRAM_TOKEN;
    const CHAT_ID = HARDCODED_CONFIG.CHAT_ID;
    const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;

    if (!TELEGRAM_TOKEN || !CHAT_ID) return false;

    const url = `${TELEGRAM_API_URL}/getChatMember?chat_id=${CHAT_ID}&user_id=${userId}`;

    try {
        const response = await fetch(url);
        const data = await response.json();

        if (data.ok && data.result) {
            const status = data.result.status;
            if (status === 'member' || status === 'administrator' || status === 'creator') {
                return true;
            }
        }
        return false;
    } catch (error) {
        console.error(`[Membership Check Error for user ${userId}]:`, error);
        return false;
    }
}

async function handleScheduledTasks(env) {
    // 1. Upcoming Pre-Alerts (News ‡∂ë‡∂±‡∑ä‡∂± ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä Alert ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ - Actual ‡∂Ö‡∂ú‡∂∫ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂∫‡∑í)
    await fetchUpcomingNewsForAlerts(env);
    
    // 2. Actual News Release (Actual ‡∂Ö‡∂ú‡∂∫ ‡∂Ü ‡∂¥‡∑É‡∑î Alert ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ - Actual ‡∂Ö‡∂ú‡∂∫ ‡∂≠‡∑í‡∂∂‡∑ö ‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂∫‡∑í)
    await fetchEconomicNews(env);
}

export default {
    async scheduled(event, env, ctx) {
        ctx.waitUntil(
            (async () => {
                try {
                    await handleScheduledTasks(env);
                } catch (error) {
                    console.error("[CRITICAL CRON FAILURE]: ", error.stack);
                }
            })()
        );
    },

    async fetch(request, env, ctx) {
        try {
            const url = new URL(request.url);

            if (url.pathname === '/trigger') {
                await handleScheduledTasks(env);
                return new Response("Scheduled task (Pre-Alerts & Actual Release) manually triggered. Check your Telegram channel and Worker Logs.", { status: 200 });
            }
            
            if (url.pathname === '/status') {
                const lastEconomicPreview = await readKV(env, LAST_ECONOMIC_MESSAGE_KEY);
                
                const statusMessage =
                    `Economic Bot Worker is active.\n` +
                    `KV Binding Check: ${env.NEWS_STATE ? 'OK (Bound)' : 'FAIL (Missing Binding)'}\n` +
                    `Last Economic Message (Preview): ${lastEconomicPreview ? lastEconomicPreview.substring(0, 100).replace(/(\r\n|\n|\r)/gm, " ") + '...' : 'N/A'}`;
                
                return new Response(statusMessage, { status: 200 });
            }

            if (request.method === 'POST') {
                console.log("--- WEBHOOK REQUEST RECEIVED (POST) ---");
                const update = await request.json();
                
                ctx.waitUntil(handleTelegramUpdate(update, env)); 
                
                return new Response('OK', { status: 200 });
            }

            return new Response('Economic News Bot is ready. Use /trigger to test manually.', { status: 200 });
            
        } catch (e) {
            console.error('[CRITICAL FETCH FAILURE - 1101 ERROR CAUGHT]:', e.stack);
            return new Response(`Worker threw an unhandled exception: ${e.message}. Check Cloudflare Worker Logs for Stack Trace.`, { status: 500 });
        }
    }
};
