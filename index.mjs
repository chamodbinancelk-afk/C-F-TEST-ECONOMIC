// required libraries
import { load } from 'cheerio';
import moment from 'moment-timezone';

// üõë CONSTANTS: Bot Token ‡∑É‡∑Ñ Chat ID ‡∂î‡∂∂ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂ú‡∂∫‡∂±‡∑ä‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠
const BOT_TOKEN = "5389567211:AAG0ksuNyQ1AN0JpcZjBhQQya9-jftany2A";
const CHAT_ID = "-1003111341307";
const FOREX_URL = "https://www.forexfactory.com/calendar";
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`; 
const TIMEZONE = 'Asia/Colombo';

// Worker state (KV ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∑Ä, ‡∂∏‡∑ô‡∂∫ Worker session ‡∂ë‡∂ö ‡∂≠‡∑î‡∑Ö ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂ö‡∂ª‡∂∫‡∑í)
const sentEventIds = new Set(); 

/**
 * Actual ‡∂Ö‡∂ú‡∂∫ Previous ‡∂Ö‡∂ú‡∂∫ ‡∑É‡∂∏‡∂ú ‡∑É‡∂Ç‡∑É‡∂±‡∑ä‡∂Ø‡∂±‡∂∫ ‡∂ö‡∂ª ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑î‡∂ª‡∑ù‡∂ö‡∂Æ‡∂±‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä).
 */
function analyzeComparison(actual, previous) {
    try {
        const a = parseFloat(actual.replace('%', '').trim());
        const p = parseFloat(previous.replace('%', '').trim());

        if (isNaN(a) || isNaN(p)) {
            throw new Error("Invalid number format");
        }
        
        if (a > p) {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`,
                reaction: "üìâ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
            };
        } else if (a < p) {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`,
                reaction: "üìà Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂â‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í"
            };
        } else {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í (${actual})`,
                reaction: "‚öñ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂¥‡∑Ä‡∂≠‡∑ì"
            };
        }
    } catch (error) {
        return {
            comparison: `Actual: ${actual}`,
            reaction: "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö"
        };
    }
}

/**
 * Forex Factory ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∑Ö ‡∂Ü‡∂ª‡∑ä‡∂Æ‡∑í‡∂ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
 */
async function getLatestEvent() {
    try {
        const response = await fetch(FOREX_URL, {
            headers: {
                // Workers ‡∑É‡∂≥‡∑Ñ‡∑è User-Agent
                'User-Agent': 'Cloudflare Worker Scraper' 
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch Forex Factory: ${response.statusText}`);
        }
        
        const html = await response.text();
        const $ = load(html);
        const rows = $('.calendar__row');

        // ‡∂¥‡∑í‡∂ß‡∑î‡∂¥‡∑É‡∑í‡∂±‡∑ä ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂ú‡∑ú‡∑É‡∑ä ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂ö‡∑Ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏ ‡∑É‡∑ú‡∂∫‡∂∫‡∑í
        for (let i = rows.length - 1; i >= 0; i--) {
            const row = rows.eq(i);
            const eventId = row.attr('data-event-id');

            const currency = row.find('.calendar__currency').text().trim();
            const title = row.find('.calendar__event').text().trim();
            const actual = row.find('.calendar__actual').text().trim();
            const previous = row.find('.calendar__previous').text().trim() || "0";
            const time = row.find('.calendar__time').text().trim();
            
            // ‚úÖ IMPACT FIX: title ‡∂ú‡∑î‡∂´‡∑è‡∂Ç‡∂ú‡∂∫ ‡∂á‡∂≠‡∑í span ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            const impactSpan = row.find('.calendar__impact').find('span[title]');
            
            const impact = impactSpan.attr('title') || "Unknown";
            
            if (eventId && currency && title && actual && actual !== "-") {
                return {
                    id: eventId,
                    currency: currency,
                    title: title,
                    time: time,
                    actual: actual,
                    previous: previous,
                    impact: impact 
                };
            }
        }
        return null;
    } catch (error) {
        console.error("Error fetching or parsing data:", error.message);
        return null;
    }
}

/**
 * Telegram ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∫‡∑Ä‡∂∫‡∑í.
 */
async function sendEvent(event) {
    const now = moment().tz(TIMEZONE).format('YYYY-MM-DD HH:mm:ss');

    let impactLevel;
    switch (event.impact) {
        case "High Impact Expected":
            impactLevel = "üî¥ High";
            break;
        case "Medium Impact Expected":
            impactLevel = "üü† Medium";
            break;
        case "Low Impact Expected":
            impactLevel = "üü¢ Low";
            break;
        default:
            impactLevel = "‚ö™ Unknown";
    }

    const { comparison, reaction } = analyzeComparison(event.actual, event.previous);

    const msg = `üõë *Breaking News* üì∞

‚è∞ *Date & Time:* ${now}

üåç *Currency:* ${event.currency}

üìå *Headline:* ${event.title}

üî• *Impact:* ${impactLevel}

üìà *Actual:* ${event.actual}
üìâ *Previous:* ${event.previous}

üîç *Details:* ${comparison}

üìà *Market Reaction Forecast:* ${reaction}

üöÄ *Dev : Mr Chamo üá±üá∞*`;

    try {
        const payload = {
            chat_id: CHAT_ID,
            text: msg,
            parse_mode: "Markdown"
        };

        const response = await fetch(TELEGRAM_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Telegram API failed: ${response.status} - ${errorText}`);
        }
        console.log(`Sent event: ${event.id} - ${event.title}`);
        return true;
    } catch (error) {
        // ‡∂î‡∂∂‡∂ú‡∑ö Logs ‡∑Ñ‡∑í‡∂Ø‡∑ì ‡∂∏‡∑ô‡∂∏ error ‡∂ë‡∂ö ‡∂Ø‡∑í‡∑É‡∑ä‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫
        console.error("Error sending Telegram message:", error.message);
        return false;
    }
}

/**
 * ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫ ‡∂â‡∂ß‡∑î ‡∂ö‡∂ª‡∂± Logic ‡∂ö‡∑ú‡∂ß‡∑É.
 */
async function mainLogic() {
    try {
        const event = await getLatestEvent();

        // üõë ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É: sentEventIds ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠.
        // ‡∂∏‡∑ô‡∂∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∑ì ‡∑Ä‡∑ö.
        if (event) {
            console.log("Found event. Attempting to send to Telegram:", event.id);
            await sendEvent(event);
            // sentEventIds.add(event.id); // KV ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í‡∑Ä ‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∂ª‡∑ä‡∂Æ ‡∑Ä‡∑í‡∂ª‡∑Ñ‡∑í‡∂≠‡∂∫‡∑í
        } else {
            console.log("No new completed event (Actual value missing) in the current scan.");
        }
    } catch (e) {
        console.error("Main logic error:", e.message);
    }
}

// üõë CLOUDFLARE WORKER EXPORT (Manual Trigger ‡∑É‡∑Ñ Cron Trigger ‡∑É‡∂≥‡∑Ñ‡∑è)
export default {
    
    // 1. üåê Manual Trigger (HTTP Request) - URL ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑í‡∑Ä‡∑í‡∑É‡∑ô‡∂± ‡∑Ä‡∑í‡∂ß ‡∂∞‡∑è‡∑Ä‡∂±‡∂∫ ‡∑Ä‡∑ö.
    async fetch(request, env, ctx) {
        ctx.waitUntil(mainLogic());
        return new Response("Forex Scraper Logic initiated successfully via Manual HTTP Request.", { status: 200 });
    },

    // 2. ‚è±Ô∏è Cron Trigger (Automatic Scheduled Run) - wrangler.toml ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂∞‡∑è‡∑Ä‡∂±‡∂∫ ‡∑Ä‡∑ö.
    async scheduled(event, env, ctx) {
        ctx.waitUntil(mainLogic()); 
    }
};
