import requests
from bs4 import BeautifulSoup
from googletrans import Translator
from datetime import datetime
from telegram import Bot
from dotenv import load_dotenv
import pytz
import os
import time
import logging

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
FF_URL = os.getenv("FOREXFACTORY_NEWS_URL", "https://www.forexfactory.com/news")
FETCH_INTERVAL = int(os.getenv("FETCH_INTERVAL_SEC", 1))

# ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö‡∑è: ‡∂Ü‡∂ª‡∂Ç‡∂†‡∑í ‡∂∏‡∑è‡∂ª‡∑ä‡∂ú ‡∂Ø‡∑ô‡∂ö‡∂ß ‡∑Ä‡∑ô‡∂±‡∂∏ ‡∂ú‡∑ú‡∂±‡∑î
LAST_FF_HEADLINE_FILE = "last_ff_headline.txt"
LAST_CNBC_HEADLINE_FILE = "last_cnbc_headline.txt"

bot = Bot(token=BOT_TOKEN)
translator = Translator()

# Setup logging
logging.basicConfig(level=logging.INFO, filename="bot.log",
                    format='%(asctime)s %(levelname)s: %(message)s')

# ‡∂ú‡∑ú‡∂±‡∑î ‡∂±‡∂∏ parameter ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö‡∑è
def read_last_headline(filename):
    if not os.path.exists(filename):
        return None
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except Exception as e:
        logging.error(f"Error reading file {filename}: {e}")
        return None

# ‡∂ú‡∑ú‡∂±‡∑î ‡∂±‡∂∏ parameter ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö‡∑è
def write_last_headline(filename, headline):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(headline)
    except Exception as e:
        logging.error(f"Error writing to file {filename}: {e}")

# ... (fetch_forexfactory_news ‡∑É‡∑Ñ fetch_cnbc_news ‡∂∫‡∂± functions ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª ‡∂±‡∑ê‡∂≠) ...

# --- Send Telegram ---
def send_telegram_news(headline, news_url, img_url, source):
    # ... (‡∂∏‡∑ô‡∂∏ function ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂±‡∑ú‡∂ö‡∂ª ‡∂≠‡∑ê‡∂∂‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö) ...
    try:
        news_resp = requests.get(news_url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
        news_resp.raise_for_status()
        news_soup = BeautifulSoup(news_resp.content, 'html.parser')
        # CNBC/FF ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä‡∑Ä tag ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂±‡∑í‡∑É‡∑è ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂°‡∑ö‡∂Ø‡∂∫ ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        # ‡∂î‡∂∂‡∂ß ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, ‡∂ë‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ä source ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è detail page ‡∂ë‡∂ö‡∑ö structure ‡∂ë‡∂ö ‡∑Ñ‡∑ú‡∂≥‡∑í‡∂±‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
        desc_tag = news_soup.find('p') or news_soup.find('div', class_=lambda c: c and 'article-content' in c) or news_soup.find('div')
        
        # Strip ‡∂ö‡∂ª, ‡∑Ñ‡∑í‡∑É‡∑ä‡∂≠‡∑ê‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª, ‡∂Ö‡∂ö‡∑ä‡∑Ç‡∂ª 500‡∂ß ‡∑É‡∑ì‡∂∏‡∑è ‡∂ö‡∂ª‡∂∫‡∑í
        description = desc_tag.get_text(strip=True).replace('\n', ' ')[:500].strip() if desc_tag else "No description found."
    except Exception as e:
        # logging.error(f"Failed to fetch description for {source}: {e}") # ‡∂∏‡∑ô‡∂∫ ‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä debug ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö
        description = "No description found."
        
    try:
        description_si = translator.translate(description, dest='si').text
    except Exception:
        description_si = "‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫."

    sri_lanka_tz = pytz.timezone('Asia/Colombo')
    now = datetime.now(sri_lanka_tz)
    date_time = now.strftime('%Y-%m-%d %I:%M %p')

    message = f"""üì∞ *Fundamental News (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω)*

‚è∞ *Date & Time:* {date_time}
üåç *Source:* {source}

üß† *Headline:* {headline}

üî• *‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω:* {description_si}

üîó *Read more:* {news_url}

üöÄ *Dev :* Mr Chamo üá±üá∞
"""

    try:
        if img_url:
            bot.send_photo(chat_id=CHAT_ID, photo=img_url, caption=message, parse_mode='Markdown')
        else:
            bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
        logging.info(f"Posted news from {source}: {headline}")
    except Exception as e:
        logging.error(f"Failed to send message: {e}")


# --- Main Loop ---
if __name__ == "__main__":
    # --- fetch_forexfactory_news ‡∑É‡∑Ñ fetch_cnbc_news ‡∂∫‡∂± functions ‡∂∏‡∑ô‡∂≠‡∑ê‡∂±‡∂ß ‡∂¥‡∑í‡∂ß‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ---
    # (‡∂î‡∂∂‡∑ö original code ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑í‡∂∂‡∑ñ ‡∂¥‡∂ª‡∑í‡∂Ø‡∑í‡∂∏.)
    # ‡∂∏‡∂∏ ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂í‡∑Ä‡∑è ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ω‡∑í‡∂∫‡∑è ‡∂±‡∑ê‡∂≠, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂í‡∑Ä‡∑è ‡∂ë‡∂Ω‡∑ô‡∑É‡∂∏ ‡∂≠‡∑í‡∂∂‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
    
    while True:
        
        # 1. ForexFactory news
        last_ff = read_last_headline(LAST_FF_HEADLINE_FILE)
        ff_headline, ff_url, ff_img = fetch_forexfactory_news()
        
        if ff_headline and ff_headline != last_ff:
            send_telegram_news(ff_headline, ff_url, ff_img, "Forex Factory")
            write_last_headline(LAST_FF_HEADLINE_FILE, ff_headline) # FF ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ô‡∂±‡∂∏ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∂ß ‡∂Ω‡∑í‡∂∫‡∂∫‡∑í
        
        # 2. CNBC news
        last_cnbc = read_last_headline(LAST_CNBC_HEADLINE_FILE)
        cnbc_headline, cnbc_url, cnbc_img = fetch_cnbc_news()
        
        if cnbc_headline and cnbc_headline != last_cnbc:
            send_telegram_news(cnbc_headline, cnbc_url, cnbc_img, "CNBC")
            write_last_headline(LAST_CNBC_HEADLINE_FILE, cnbc_headline) # CNBC ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ô‡∂±‡∂∏ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∂ß ‡∂Ω‡∑í‡∂∫‡∂∫‡∑í

        time.sleep(FETCH_INTERVAL)
