// --- Cloudflare Worker Dependencies ---
const { load } = require('cheerio');
const moment = require('moment-timezone');

// üö®üö® CRITICAL: ‡∂î‡∂∂‡∂ú‡∑ö ‡∑É‡∑ê‡∂∂‡∑ë BOT TOKEN ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂≠‡∑î‡∂Ω‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±! üö®üö®
const TELEGRAM_TOKEN = '8299929776:AAGKU7rkfakmDBXdgiGSWzAHPgLRJs-twZg'; 

// üö®üö® CRITICAL: ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂Ω‡∑ê‡∂∂‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î CHAT ID ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂≠‡∑î‡∂Ω‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±! üö®üö®
const CHAT_ID = '-1003177936060'; 

// --- Constants ---
const COLOMBO_TIMEZONE = 'Asia/Colombo';
const HEADERS = { 'User-Agent': 'Mozilla/5.0 (Cloudflare Worker/ForexBot)' };

// URLs
const FF_NEWS_URL = "https://www.forexfactory.com/news";
const FF_CALENDAR_URL = "https://www.forexfactory.com/calendar"; // Economic Events ‡∑É‡∂≥‡∑Ñ‡∑è

// --- KV KEYS ---
// Fundamental News Keys
const LAST_HEADLINE_KEY = 'last_forex_headline'; 
const LAST_FULL_MESSAGE_KEY = 'last_full_news_message'; 
const LAST_IMAGE_URL_KEY = 'last_image_url'; 

// Economic Calendar Keys
const LAST_ECONOMIC_EVENT_ID_KEY = 'last_economic_event_id'; 
const LAST_ECONOMIC_MESSAGE_KEY = 'last_economic_message'; 


// =================================================================
// --- UTILITY FUNCTIONS ---
// =================================================================

/**
 * Utility function to send raw messages via Telegram API.
 */
async function sendRawTelegramMessage(chatId, message, imgUrl = null) {
    if (!TELEGRAM_TOKEN || TELEGRAM_TOKEN === 'YOUR_TELEGRAM_BOT_TOKEN') {
        console.error("TELEGRAM_TOKEN is missing or not updated.");
        return;
    }
    
    let apiMethod = imgUrl ? 'sendPhoto' : 'sendMessage';
    let payload = { chat_id: chatId, parse_mode: 'HTML' };

    if (imgUrl) {
        payload.photo = imgUrl;
        payload.caption = message;
    } else {
        payload.text = message;
    }

    const apiURL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/${apiMethod}`;
    
    // Exponential backoff implemented for robustness
    for (let attempt = 0; attempt < 3; attempt++) {
        try {
            const response = await fetch(apiURL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.status === 429) {
                const delay = Math.pow(2, attempt) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
                continue; 
            }

            if (!response.ok) {
                const errorText = await response.text();
                console.error(`Telegram API Error (${apiMethod}): ${response.status} - ${errorText}`);
                break;
            }
            return; // Success
        } catch (error) {
            console.error("Error sending message to Telegram:", error);
            const delay = Math.pow(2, attempt) * 1000;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}

/**
 * KV Helper Functions
 */
async function readKV(env, key) {
    try {
        const value = await env.NEWS_STATE.get(key);
        return value;
    } catch (e) {
        console.error(`KV Read Error (${key}):`, e);
        return null;
    }
}

async function writeKV(env, key, value) {
    try {
        await env.NEWS_STATE.put(key, value);
    } catch (e) {
        console.error(`KV Write Error (${key}):`, e);
    }
}

/**
 * Translation Function (Using Google Translate API)
 */
async function translateText(text) {
    const translationApiUrl = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=si&dt=t&q=${encodeURIComponent(text)}`;
    try {
        const response = await fetch(translationApiUrl);
        const data = await response.json();
        if (data && data[0] && Array.isArray(data[0])) {
            return data[0].map(item => item[0]).join('');
        }
        throw new Error("Invalid translation response structure.");
    } catch (e) {
        console.error('Translation API Error. Using original text.', e);
        return `[Translation Failed: ${text}]`;
    }
}


// =================================================================
// --- ECONOMIC CALENDAR LOGIC ---
// =================================================================

/**
 * Economic Event ‡∂ë‡∂ö‡∑ö Actual/Previous ‡∑É‡∂Ç‡∑É‡∂±‡∑ä‡∂Ø‡∂±‡∂∫ ‡∂ö‡∂ª ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í.
 */
function analyzeComparison(actual, previous) {
    try {
        const cleanAndParse = (value) => parseFloat(value.replace(/%|,/g, '').trim() || '0');

        const a = cleanAndParse(actual);
        const p = cleanAndParse(previous);

        if (isNaN(a) || isNaN(p) || actual.trim() === '-' || actual.trim() === '') {
             return { 
                comparison: `Actual: ${actual}`, 
                reaction: "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö" 
             };
        }

        if (a > p) {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂â‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`,
                reaction: "üìà Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂â‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í (‡∂∞‡∂±‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∑ä)" 
            };
        } else if (a < p) {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑Ä‡∂©‡∑è ‡∂¥‡∑Ñ‡∑Ö‡∂∫‡∑í (${actual})`,
                reaction: "üìâ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑Ñ‡∑Ö‡∂ß ‡∂∫‡∑è ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫‡∑í (‡∂ç‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏‡∑ä)"
            };
        } else {
            return {
                comparison: `‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑è‡∂±‡∂∫‡∑í (${actual})`,
                reaction: "‚öñ Forex ‡∑É‡∑Ñ Crypto ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä‡∂ª‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂¥‡∑Ä‡∂≠‡∑ì"
            };
        }
    } catch (error) {
        return { 
            comparison: `Actual: ${actual}`, 
            reaction: "üîç ‡∑Ä‡∑ô‡∑Ö‡∂≥‡∂¥‡∑ú‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö" 
        };
    }
}

/**
 * Scrapes the Forex Factory calendar for the latest released economic event.
 */
async function getLatestEconomicEvent() {
    const resp = await fetch(FF_CALENDAR_URL, { headers: HEADERS });
    if (!resp.ok) throw new Error(`HTTP error! status: ${resp.status} on calendar page`);

    const html = await resp.text();
    const $ = load(html);
    const rows = $('.calendar__row');

    for (let i = rows.length - 1; i >= 0; i--) {
        const row = $(rows[i]);
        const eventId = row.attr("data-event-id");

        const currency_td = row.find(".calendar__currency");
        const title_td = row.find(".calendar__event");
        const actual_td = row.find(".calendar__actual");
        const previous_td = row.find(".calendar__previous");
        const impact_td = row.find('.calendar__impact');
        
        if (!eventId || !currency_td.length || !title_td.length || !actual_td.length || !previous_td.length || !impact_td.length) {
            continue;
        }

        const actual = actual_td.text().trim();
        const previous = previous_td.text().trim() || "0";
        
        if (!actual || actual === "-") {
            continue;
        }
        
        // --- Impact Extraction: ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∑Å‡∂ö‡∑ä‡∂≠‡∑í‡∂∏‡∂≠‡∑ä selector ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
        let impactText = "Unknown";
        // .impact-icon class ‡∂ë‡∂ö ‡∑É‡∑Ñ‡∑í‡∂≠ ‡∑É‡∑Ñ title attribute ‡∂ë‡∂ö ‡∑É‡∑Ñ‡∑í‡∂≠ element ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∂∫‡∑í
        const impactElement = impact_td.find('span.impact-icon[title], span[title]').first(); 

        if (impactElement.length > 0) {
            // title attribute ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Impact Text ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì.
            impactText = impactElement.attr('title') || "Unknown"; 
        }
        // ------------------------------------------------------------------

        return {
            id: eventId,
            currency: currency_td.text().trim(),
            title: title_td.text().trim(),
            actual: actual,
            previous: previous,
            impact: impactText // ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∑Ö impact text ‡∂ë‡∂ö return ‡∑Ä‡∑ö.
        };
    }
    
    return null;
}

/**
 * Handles fetching, processing, and sending the economic calendar event.
 */
async function fetchEconomicNews(env) {
    try {
        const event = await getLatestEconomicEvent();
        if (!event) return;

        const lastEventId = await readKV(env, LAST_ECONOMIC_EVENT_ID_KEY);

        if (event.id === lastEventId) {
            console.info(`Economic: No new realized event. Last ID: ${event.id}`);
            return; // EXIT - Prevents duplication
        }

        // --- ONLY PROCEED IF THE EVENT IS NEWLY REALIZED ---
        await writeKV(env, LAST_ECONOMIC_EVENT_ID_KEY, event.id);

        const { comparison, reaction } = analyzeComparison(event.actual, event.previous);
        const date_time = moment().tz(COLOMBO_TIMEZONE).format('YYYY-MM-DD hh:mm A');

        // Impact level ‡∂ë‡∂ö ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä ‡∂ö‡∂ª‡∂ú‡∑ô‡∂± Text ‡∑É‡∑Ñ Emoji ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        let impactLevelText = "‚ö™ Unknown Impact";
        let impactEmoji = "‚ö™";
        switch (event.impact) {
            case "High Impact Expected":
                impactLevelText = "üî¥ High Impact News";
                impactEmoji = "üî¥";
                break;
            case "Medium Impact Expected":
                impactLevelText = "üü† Medium Impact News";
                impactEmoji = "üü†";
                break;
            case "Low Impact Expected":
                impactLevelText = "üü¢ Low Impact News";
                impactEmoji = "üü¢";
                break;
            case "Non-Economic/Holiday": // ‡∂±‡∑Ä impact type ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∑É‡∑î‡∂ö‡∂ª ‡∂ú‡∂±‡∑ì
                impactLevelText = "‚ö™ Non-Economic / Holiday";
                impactEmoji = "‚ö™";
                break;
            default:
                impactLevelText = `‚ö™ Unknown Impact (${event.impact})`; // ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ñ Impact string ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
                impactEmoji = "‚ö™";
        }

        // Final Sinhala message (HTML format) - Impact Level ‡∂ë‡∂ö ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∑Ä‡∑ö
        const message = 
            `<b>üö® Economic Calendar Release üîî</b>\n\n` +
            `‚è∞ <b>Date & Time:</b> ${date_time}\n\n` +
            `üåç <b>Currency:</b> ${event.currency}\n` +
            `üìå <b>Headline:</b> ${event.title}\n\n` +
            `${impactEmoji} <b>Impact:</b> ${impactLevelText}\n\n` +
            `üìà <b>Actual:</b> ${event.actual}\n` +
            `üìâ <b>Previous:</b> ${event.previous}\n\n` +
            `üîç <b>Details:</b> ${comparison}\n\n` +
            `<b>üìà Market Reaction Forecast:</b> ${reaction}\n\n` +
            `üöÄ <b>Dev: Mr Chamo üá±üá∞</b>`;

        // Save the FULL message to KV for the command response (/economic)
        await writeKV(env, LAST_ECONOMIC_MESSAGE_KEY, message);

        // Sending the economic message to the main channel
        await sendRawTelegramMessage(CHAT_ID, message);
        console.log(`Economic: Sent new event ID: ${event.id}`);
        
    } catch (error) {
        console.error("An error occurred during ECONOMIC task:", error);
    }
}


// =================================================================
// --- FUNDAMENTAL NEWS LOGIC ---
// =================================================================

async function getLatestForexNews() {
    const resp = await fetch(FF_NEWS_URL, { headers: HEADERS });
    if (!resp.ok) throw new Error(`HTTP error! status: ${resp.status}`);

    const html = await resp.text();
    const $ = load(html);
    const newsLinkTag = $('a[href^="/news/"]').not('a[href$="/hit"]').first();

    if (newsLinkTag.length === 0) return null;

    const headline = newsLinkTag.text().trim();
    const newsUrl = "https://www.forexfactory.com" + newsLinkTag.attr('href');
    
    // Fetch detail page
    const newsResp = await fetch(newsUrl, { headers: HEADERS });
    if (!newsResp.ok) throw new Error(`HTTP error! status: ${newsResp.status} on detail page`);

    const newsHtml = await newsResp.text();
    const $detail = load(newsHtml);
    const imgUrl = $detail('img.attach').attr('src');
    const description = $detail('p.news__copy').text().trim() || "No description found.";

    return { headline, newsUrl, imgUrl, description };
}

async function fetchForexNews(env) {
    try {
        const news = await getLatestForexNews();
        if (!news) return;

        const lastHeadline = await readKV(env, LAST_HEADLINE_KEY);
        const currentHeadline = news.headline;
        const cleanLastHeadline = lastHeadline ? lastHeadline.trim() : null; 

        if (currentHeadline === cleanLastHeadline) {
            console.info(`Forex: No new headline. Last: ${currentHeadline}`);
            return; // EXIT - Prevents duplication
        }
        
        await writeKV(env, LAST_HEADLINE_KEY, currentHeadline);

        // Generate the message
        const description_si = await translateText(news.description);
        const date_time = moment().tz(COLOMBO_TIMEZONE).format('YYYY-MM-DD hh:mm A');
        
        const message = `<b>üì∞ Fundamental News (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω)</b>\n\n` +
                        `<b>‚è∞ Date & Time:</b> ${date_time}\n\n` +
                        `<b>üåé Headline (English):</b> ${news.headline}\n\n` +
                        `<b>üî• ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω:</b> ${description_si}\n\n` +
                        `<b>üöÄ Dev: Mr Chamo üá±üá∞</b>`;

        // Save the FULL message and image URL to KV for the command response
        await writeKV(env, LAST_FULL_MESSAGE_KEY, message);
        await writeKV(env, LAST_IMAGE_URL_KEY, news.imgUrl || ''); 

        // Sending the news message to the main channel
        await sendRawTelegramMessage(CHAT_ID, message, news.imgUrl);
    } catch (error) {
        console.error("An error occurred during FUNDAMENTAL task:", error);
    }
}


// =================================================================
// --- CLOUDFLARE WORKER HANDLERS (Unified) ---
// =================================================================

async function handleScheduledTasks(env) {
    // 1. ECONOMIC CALENDAR EVENTS
    await fetchEconomicNews(env); 
    
    // 2. FUNDAMENTAL NEWS HEADLINES 
    await fetchForexNews(env);
}

export default {
    /**
     * Handles scheduled events (Cron trigger) - Checks both types of news
     */
    async scheduled(event, env, ctx) {
        ctx.waitUntil(handleScheduledTasks(env));
    },

    /**
     * Handles Fetch requests (Webhook and Status/Trigger)
     */
    async fetch(request, env, ctx) {
        const url = new URL(request.url);

        // Manual trigger
        if (url.pathname === '/trigger') {
            await handleScheduledTasks(env);
            return new Response("Scheduled task (All News) manually triggered. Check your Telegram channel for the news (if new).", { status: 200 });
        }
        
        // Status check
        if (url.pathname === '/status') {
            const lastForex = await readKV(env, LAST_HEADLINE_KEY);
            const lastEconomic = await readKV(env, LAST_ECONOMIC_EVENT_ID_KEY);
            return new Response(
                `Forex Bot Worker is active.\n` + 
                `Last Fundamental Headline: ${lastForex || 'N/A'}\n` +
                `Last Economic Event ID: ${lastEconomic || 'N/A'}`, 
                { status: 200 }
            );
        }

        // Webhook Handling (for Telegram commands)
        if (request.method === 'POST') {
            try {
                const update = await request.json();
                if (update.message && update.message.chat) {
                    const chatId = update.message.chat.id;
                    
                    const messageText = update.message.text || "";
                    const command = messageText.trim().toLowerCase(); 
                    
                    let replyText = "";

                    // Handle Commands
                    switch (command) {
                        case '/start':
                            replyText = 
                                `<b>üëã Hello There !</b>\n\n` +
                                `üíÅ‚Äç‚ôÇÔ∏è ‡∂∏‡∑ö BOT ‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä ‡∂î‡∂∫‡∑è‡∂ß <b>Fundamental News</b> ‡∑É‡∑Ñ <b>Economic News</b> ‡∂Ø‡∑ô‡∂ö‡∂∏ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∂Ø‡∑ê‡∂± ‡∂ú‡∂±‡∑ä‡∂±. News Update ‡∑Ä‡∑ô‡∂Ø‡∑ä‡∂Ø‡∑ì‡∂∏ <b>C F NEWS MAIN CHANNEL</b> ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è.\n\n` +
                                `üôã‚Äç‚ôÇÔ∏è Commands ‡∑Ä‡∂Ω Usage ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂∏‡∂∫‡∑íüëá\n\n` +
                                `‚óá <code>/fundamental</code> :- üì∞ Last Fundamental News\n` +
                                `‚óá <code>/economic</code> :- üìÅ Last Economic News (Economic Calendar Event)\n\n` + 
                                `üéØ ‡∂∏‡∑ö BOT ‡∂¥‡∑ê‡∂∫ 24‡∂∏ Active ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è.üîî.. ‚úçÔ∏è\n\n` +
                                `‚óá‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óá\n\n` +
                                `üöÄ <b>Developer :</b> @chamoddeshan\n` +
                                `üî• <b>Mr Chamo Corporation ¬©</b>\n\n` +
                                `‚óá‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óá`;
                            await sendRawTelegramMessage(chatId, replyText);
                            break;

                        case '/fundamental':
                        case '/economic':
                            // Command ‡∂ë‡∂ö ‡∂Ö‡∂±‡∑î‡∑Ä KV key ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
                            const messageKey = (command === '/fundamental') ? LAST_FULL_MESSAGE_KEY : LAST_ECONOMIC_MESSAGE_KEY;
                            const title = (command === '/fundamental') ? 'Last Fundamental News Update' : 'Last Economic News Update';
                            
                            // Image URL ‡∂á‡∂≠‡∑ä‡∂≠‡∑ö Fundamental News ‡∑Ä‡∂Ω ‡∂¥‡∂∏‡∂´‡∂∫‡∑í
                            const lastImageUrl = (command === '/fundamental') ? await readKV(env, LAST_IMAGE_URL_KEY) : null; 
                            
                            // Read the full formatted message saved in KV 
                            const lastFullMessage = await readKV(env, messageKey);
                            
                            if (lastFullMessage) {
                                // Final message ‡∂ë‡∂ö‡∑ö title ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                                const finalMessage = `<b>üì∞ ${title}</b>\n\n${lastFullMessage}`;
                                await sendRawTelegramMessage(chatId, finalMessage, lastImageUrl); 
                            } else {
                                replyText = "Sorry, no recent news has been processed yet. Please wait for the next update or try the /trigger endpoint.";
                                await sendRawTelegramMessage(chatId, replyText);
                            }
                            break;

                        default:
                            replyText = `‡∂î‡∂∂‡∂ß ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠. ‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∑Ñ Commands ‡∑É‡∂≥‡∑Ñ‡∑è <b>/start</b> ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.`;
                            await sendRawTelegramMessage(chatId, replyText);
                            break;
                    }
                }
                return new Response('OK', { status: 200 });
            } catch (e) {
                console.error('Webhook error:', e);
                return new Response('OK', { status: 200 });
            }
        }

        return new Response('Forex News Bot is ready. Use /trigger to test manually.', { status: 200 });
    }
};
